// <auto-generated />
using System;
using Group9_iCareApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Group9_iCareApp.Migrations
{
    [DbContext(typeof(iCAREDBContext))]
    partial class iCAREDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Group9_iCareApp.Models.DocumentMetadatum", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocId"));

                    b.Property<DateTime?>("DateOfCreation")
                        .HasColumnType("datetime");

                    b.Property<string>("DocName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("DocId")
                        .HasName("PK__Document__3EF1888DDD7318E2");

                    b.ToTable("DocumentMetadata");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.DrugsDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__DrugsDic__3214EC270D13C263");

                    b.ToTable("DrugsDictionary", (string)null);
                });

            modelBuilder.Entity("Group9_iCareApp.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__GeoCodes__3214EC27C87E4192");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("Group9_iCareApp.Models.ModificationHistory", b =>
                {
                    b.Property<int>("ModificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModificationId"));

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("DocId")
                        .HasColumnType("int")
                        .HasColumnName("DocID");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("WorkerID");

                    b.HasKey("ModificationId")
                        .HasName("PK__Modifica__A3FE5A12391D4EDB");

                    b.HasIndex("DocId");

                    b.HasIndex("WorkerId");

                    b.ToTable("ModificationHistory", (string)null);
                });

            modelBuilder.Entity("Group9_iCareApp.Models.PatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BedId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BedID");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationID");

                    b.Property<string>("TreatmentArea")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__PatientR__3214EC27268C669B");

                    b.HasIndex("LocationId");

                    b.ToTable("PatientRecord", (string)null);
                });

            modelBuilder.Entity("Group9_iCareApp.Models.TreatmentRecord", b =>
                {
                    b.Property<string>("TreatmentId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(900)")
                        .HasColumnName("TreatmentID");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateTime?>("TreatmentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int")
                        .HasColumnName("WorkerID");

                    b.HasKey("TreatmentId")
                        .HasName("PK__Treatmen__1A57B711ABC92DA2");

                    b.HasIndex("PatientId");

                    b.HasIndex("WorkerId");

                    b.ToTable("TreatmentRecord", (string)null);
                });

            modelBuilder.Entity("Group9_iCareApp.Models.WorkerRole", b =>
                {
                    b.Property<string>("Profession")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Profession")
                        .HasName("PK__UserRole__3214EC27AC10000D");

                    b.ToTable("WorkerRole", (string)null);
                });

            modelBuilder.Entity("Group9_iCareApp.Models.iCAREAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdNavigationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdNavigationId");

                    b.ToTable("iCAREAdmins");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.iCAREUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ID");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationID");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                   

                    b.HasKey("Id")
                        .HasName("PK__iCAREUse__3214EC275A117A47");

                    b.HasIndex("LocationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("iCAREUser", (string)null);
                });

            modelBuilder.Entity("Group9_iCareApp.Models.iCAREWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdNavigationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionNavigationProfession")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("IdNavigationId");

                    b.HasIndex("ProfessionNavigationProfession");

                    b.ToTable("iCAREWorkers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Group9_iCareApp.Models.ModificationHistory", b =>
                {
                    b.HasOne("Group9_iCareApp.Models.DocumentMetadatum", "Doc")
                        .WithMany("ModificationHistories")
                        .HasForeignKey("DocId")
                        .HasConstraintName("FK__Modificat__DocID__4D94879B");

                    b.HasOne("Group9_iCareApp.Models.iCAREWorker", "Worker")
                        .WithMany("ModificationHistories")
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("FK__Modificat__Worke__4E88ABD4");

                    b.Navigation("Doc");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.PatientRecord", b =>
                {
                    b.HasOne("Group9_iCareApp.Models.Location", "Location")
                        .WithMany("PatientRecords")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_PatientRecord_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.TreatmentRecord", b =>
                {
                    b.HasOne("Group9_iCareApp.Models.PatientRecord", "Patient")
                        .WithMany("TreatmentRecords")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK__Treatment__Patie__47DBAE45");

                    b.HasOne("Group9_iCareApp.Models.iCAREWorker", "Worker")
                        .WithMany("TreatmentRecords")
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("FK__Treatment__Worke__48CFD27E");

                    b.Navigation("Patient");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.iCAREAdmin", b =>
                {
                    b.HasOne("Group9_iCareApp.Models.iCAREUser", "IdNavigation")
                        .WithMany()
                        .HasForeignKey("IdNavigationId");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.iCAREUser", b =>
                {
                    b.HasOne("Group9_iCareApp.Models.Location", "Location")
                        .WithMany("ICareusers")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_iCAREUser_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.iCAREWorker", b =>
                {
                    b.HasOne("Group9_iCareApp.Models.iCAREUser", "IdNavigation")
                        .WithMany()
                        .HasForeignKey("IdNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group9_iCareApp.Models.WorkerRole", "ProfessionNavigation")
                        .WithMany("ICareworkers")
                        .HasForeignKey("ProfessionNavigationProfession")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdNavigation");

                    b.Navigation("ProfessionNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Group9_iCareApp.Models.iCAREUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Group9_iCareApp.Models.iCAREUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group9_iCareApp.Models.iCAREUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Group9_iCareApp.Models.iCAREUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Group9_iCareApp.Models.DocumentMetadatum", b =>
                {
                    b.Navigation("ModificationHistories");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.Location", b =>
                {
                    b.Navigation("ICareusers");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.PatientRecord", b =>
                {
                    b.Navigation("TreatmentRecords");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.WorkerRole", b =>
                {
                    b.Navigation("ICareworkers");
                });

            modelBuilder.Entity("Group9_iCareApp.Models.iCAREWorker", b =>
                {
                    b.Navigation("ModificationHistories");

                    b.Navigation("TreatmentRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
